import org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact

apply plugin: 'android-library'

repositories {
    mavenCentral()
    maven() { url "${System.env.ANDROID_HOME}/extras/android/m2repository/"}
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
    }
}

configurations {
    // Dependencies in this scope will be installed under maven build
    externalCompile
    compile.extendsFrom externalCompile

    // Used for correct javadoc generation
    javadoc.extendsFrom compile
}

dependencies {
    externalCompile 'com.android.support:support-v4:19.0.1'
    
    javadoc 'org.apache.httpcomponents:httpclient:4.0.1'
    javadoc 'org.json:json:20080701'
    javadoc 'com.google.android:annotations:4.1.1.4@jar'
}

if (rootProject.tasks.hasProperty('mavenBuild')) {
    task apklib(type: Copy, dependsOn: rootProject.tasks.mavenBuild) {
        from fileTree("${project.projectDir}/target") { include "*.apklib" }
        into file("${project.buildDir}/libs")
        rename '(.*)', "${project.name}-${project.version}.apklib"
    }
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.allJava
    classpath = project.files(configurations.javadoc,
        "${buildDir}/classes/release",
        project.fileTree("${buildDir}/exploded-bundles") { include '*/classes.jar' },
        new File(android.plugin.sdkDirectory, "platforms/${android.compileSdkVersion}/android.jar"))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.allSource
    classifier = 'sources'
}

if(project.hasProperty('officialBuild')) {
    apply plugin: 'maven'
    apply plugin: 'signing'
    
    def String releaseRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    def String snapshotRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : 'https://oss.sonatype.org/content/repositories/snapshots/'
    def String repositoryUsername = hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ''
    def String repositoryPassword = hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ''

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.project {
                    artifactId = 'library'
                    name = 'VK API library'
                    packaging = 'aar'
                    description = 'Main VK API library'
                    url = 'https://github.com/VKCOM/vk-android-sdk'
                    scm {
                        url 'https://github.com/VKCOM/vk-android-sdk'
                        connection 'scm:git:git://github.com/VKCOM/vk-android-sdk.git'
                        developerConnection 'scm:git:git://github.com/VKCOM/vk-android-sdk.git'
                    }
                    licenses {
                        license {
                            name 'MIT License'
                            url 'https://github.com/Prototik/vk-android-sdk/raw/master/LICENSE'
                            distribution 'repo'
                        }
                    }
                }

                repository(url: releaseRepositoryUrl) {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }
                snapshotRepository(url: snapshotRepositoryUrl) {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }
            }
        }
    }

    signing {
        required true
        sign configurations.archives
    }
    
    artifacts {
        archives tasks.javadocJar
        archives tasks.sourcesJar
        archives new DefaultPublishArtifact(project.name, 'apklib', 'apklib', '', new Date(), file("${project.buildDir}/libs/${project.name}-${project.version}.apklib"), tasks.apklib)
    }
}
